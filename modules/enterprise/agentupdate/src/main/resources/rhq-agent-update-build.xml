<?xml version="1.0" encoding="UTF-8"?>

<project name="rhq-agent-update" default="start" basedir=".">

   <condition property="iswindows">
      <os family="windows"/>
   </condition>

   <!-- ================================================================= -->
   <!-- this will back up the current agent, in case it needs to be recovered -->
   <!-- this is a standalone target that the AgentUpdate will call when it needs to backup the agent -->
   <target name="backup-agent">
      <echo>=== BACKING UP CURRENT AGENT ===</echo>
      <echo>From: ${rhq.agent.update.update-agent-dir}</echo>
      <echo>To: ${java.io.tmpdir}/rhq-agent-update-backup</echo>
      <delete dir="${java.io.tmpdir}/rhq-agent-update-backup" />
      <copy todir="${java.io.tmpdir}/rhq-agent-update-backup">
        <fileset dir="${rhq.agent.update.update-agent-dir}"/>
      </copy>
      <echo>=== BACKUP OF CURRENT AGENT COMPLETE ===</echo>
   </target>

   <!-- ================================================================= -->
   <!-- this will restore a backed up agent -->
   <!-- this is a standalone target that the AgentUpdate will call when it needs to restore the agent -->
   <target name="restore-agent">
      <echo>=== RESTORING OLD AGENT ===</echo>
      <echo>From: ${java.io.tmpdir}/rhq-agent-update-backup</echo>
      <echo>To: ${rhq.agent.update.update-agent-dir}</echo>

      <delete dir="${rhq.agent.update.update-agent-dir}" />

      <copy todir="${rhq.agent.update.update-agent-dir}" overwrite="true">
        <fileset dir="${java.io.tmpdir}/rhq-agent-update-backup"/>
      </copy>

      <echo>chmod +x on executables under ${rhq.agent.update.update-agent-dir}</echo>
      <chmod dir="${rhq.agent.update.update-agent-dir}/bin" perm="ug+rx" includes="*.sh"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.s0"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.sl"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.dylib"/>
      <echo>=== RESTORE OF OLD AGENT COMPLETE ===</echo>
   </target>

   <!-- ================================================================= -->
   <!-- the initial target that logs some basic information, then performs the install or update -->
   <target name="start" depends="header, verify, install, update">
   </target>

   <!-- ================================================================= -->
   <!-- performs a base install - this does not attempt to upgrade an agent; this provisions a fresh new agent -->
   <target name="install" unless="rhq.agent.update.update-flag">
      <echo>Extract the agent distro zip from the agent update binary</echo>
      <unjar src="${rhq.agent.update.jar-file}"
             dest="${basedir}">
         <patternset>
             <include name="rhq-enterprise-agent-${rhq-agent.latest.version}.zip"/>
         </patternset>
      </unjar>

      <echo>Unzip the agent distro into the new installation directory</echo>
      <unzip src="${basedir}/rhq-enterprise-agent-${rhq-agent.latest.version}.zip"
             dest="${rhq.agent.update.install-agent-dir}"/>

      <echo>chmod +x on executables under ${rhq.agent.update.install-agent-dir}/rhq-agent</echo>
      <chmod dir="${rhq.agent.update.install-agent-dir}/rhq-agent/conf" perm="640" includes="agent-configuration.xml"/>
      <chmod dir="${rhq.agent.update.install-agent-dir}/rhq-agent/bin" perm="ug+rx" includes="*.sh"/>
      <chmod dir="${rhq.agent.update.install-agent-dir}/rhq-agent/lib" perm="ug+rx" includes="*.s0"/>
      <chmod dir="${rhq.agent.update.install-agent-dir}/rhq-agent/lib" perm="ug+rx" includes="*.sl"/>
      <chmod dir="${rhq.agent.update.install-agent-dir}/rhq-agent/lib" perm="ug+rx" includes="*.dylib"/>

      <echo>Remove the agent distro zip</echo>
      <delete file="${basedir}/rhq-enterprise-agent-${rhq-agent.latest.version}.zip"
              failonerror="false"/>

      <echo>DONE! Agent version ${rhq-agent.latest.version} (build number=${rhq-agent.latest.build-number}) has been installed to ${rhq.agent.update.install-agent-dir}</echo>
   </target>

   <!-- ================================================================= -->
   <!-- upgrades an existing agent -->
   <target name="update" if="rhq.agent.update.update-flag">
      <!-- we build up the new, updated agent in the update-### subdirectory
           only when we feel we successfully have a complete agent will we attempt to
           move it in the current agent's place -->
      <property name="_update.tmp.dir.name" value="update-${rhq-agent.latest.build-number}" />
      <property name="_update.tmp.dir" location="${rhq.agent.update.update-agent-dir}/${_update.tmp.dir.name}" />
      <echo>Extract the agent distro zip from the agent update binary, place in temporary update dir</echo>
      <unjar src="${rhq.agent.update.jar-file}"
             dest="${_update.tmp.dir}">
         <patternset>
             <include name="rhq-enterprise-agent-${rhq-agent.latest.version}.zip"/>
         </patternset>
      </unjar>
      <echo>Unzip the agent distro into the temporary update directory</echo>
      <unzip src="${_update.tmp.dir}/rhq-enterprise-agent-${rhq-agent.latest.version}.zip"
             dest="${_update.tmp.dir}"/>
      <echo>Remove the agent distro zip</echo>
      <delete file="${_update.tmp.dir}/rhq-enterprise-agent-${rhq-agent.latest.version}.zip"
              failonerror="false"/>

      <echo>
      At this point, we have the new (but raw) agent extracted to: ${_update.tmp.dir}/rhq-agent
      The old, existing agent (the one we are upgrading) is at: ${rhq.agent.update.update-agent-dir}
      </echo>

      <!-- if there is a failover list, keep it -->
      <echo>Copy existing failover list from the old agent to the new agent</echo>
      <copy file="${rhq.agent.update.update-agent-dir}/data/failover-list.dat"
            tofile="${_update.tmp.dir}/rhq-agent/data/failover-list.dat"
            failonerror="false" />

      <!-- make sure we retain any SSL keystores or truststores that we can find -->
      <echo>Copy existing keystore and truststore files from the old agent to the new agent</echo>
      <copy todir="${_update.tmp.dir}/rhq-agent/data"
            failonerror="false">
         <fileset dir="${rhq.agent.update.update-agent-dir}/data">
            <include name="*keystore*"/>
            <include name="*truststore*"/>
         </fileset>
      </copy>
      <copy todir="${_update.tmp.dir}/rhq-agent/conf"
            failonerror="false">
         <fileset dir="${rhq.agent.update.update-agent-dir}/conf">
            <include name="*keystore*"/>
            <include name="*truststore*"/>
            <include name="*prefs*"/>
         </fileset>
      </copy>

      <!-- if necessary, migrate native prefs into our file prefs (since RHQ 4.7) -->
      <!--
      <migrate-agent-preferences todir="${_update.tmp.dir}/rhq-agent/conf" />
      -->

      <!-- if there are any Windows wrapper environment or include files, copy them -->
      <echo>Copy existing Java Service Wrapper configuration files from the old agent to the new agent</echo>
      <copy todir="${_update.tmp.dir}/rhq-agent/bin/wrapper">
         <fileset dir="${rhq.agent.update.update-agent-dir}/bin/wrapper">
            <include name="*.env"/>
            <include name="*.inc"/>
         </fileset>
      </copy>

      <!-- copy any custom launch scripts (if we copy, we lose our UNIX +x permission bits) -->
      <echo>Copy Windows environment script - keep the old copy in effect and backup the new copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/bin"
                        newdir="${_update.tmp.dir}/rhq-agent/bin"
                        filename="rhq-agent-env.bat" keep="old" backupextension=".default" failonerror="false" />
      <echo>Copy UNIX environment script - keep the old copy in effect and backup the new copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/bin"
                        newdir="${_update.tmp.dir}/rhq-agent/bin"
                        filename="rhq-agent-env.sh" keep="old" backupextension=".default" failonerror="false" />
      <echo>Copy Windows wrapper launch script - use the new copy and backup the old copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/bin"
                        newdir="${_update.tmp.dir}/rhq-agent/bin"
                        filename="rhq-agent-wrapper.bat" keep="new" backupextension=".custom" failonerror="false" />
      <echo>Copy UNIX wrapper launch script - use the new copy and backup the old copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/bin"
                        newdir="${_update.tmp.dir}/rhq-agent/bin"
                        filename="rhq-agent-wrapper.sh" keep="new" backupextension=".custom" failonerror="false" />
      <echo>Copy Java Service Wrapper configuration - use the new copy and backup the old copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/bin/wrapper"
                        newdir="${_update.tmp.dir}/rhq-agent/bin/wrapper"
                        filename="rhq-agent-wrapper.conf" keep="new" backupextension=".custom" failonerror="false" />

      <!-- Copy any other custom scripts that the user might have placed in the bin directory -->
      <echo>Copy custom scripts that may have existed in the agent bin directory</echo>
      <copy todir="${_update.tmp.dir}/rhq-agent/bin">
         <fileset dir="${rhq.agent.update.update-agent-dir}/bin">
            <exclude name="rhq-agent-env.sh"/>
            <exclude name="rhq-agent-env.bat"/>
            <exclude name="rhq-agent-wrapper.sh"/>
            <exclude name="rhq-agent-wrapper.bat"/>
            <include name="*.sh"/>
            <include name="*.bat"/>
         </fileset>
      </copy>

      <!-- Note that because ANT copy doesn't provide a mechanism to keep file permissions,
           we'll assume the custom bin scripts need to have their +x set on the new copies.
           We will rely on the user running the update to provide the appropriate UMASK,
           which allows the user to control if its going to be u+x, ug+x or ugo+x. -->
      <echo>Ensure any custom scripts that were copied retain execute permissions</echo>
      <chmod perm="+x">
         <fileset dir="${_update.tmp.dir}/rhq-agent/bin">
            <exclude name="rhq-agent-env.sh"/>
            <exclude name="rhq-agent-wrapper.sh"/>
            <include name="*.sh"/>
         </fileset>
      </chmod>

      <!-- copy over the agent-configuration and log4j xml files, but rename them so they do not take effect -->
      <echo>Copy agent configuration file - use the old copy and backup the new copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/conf"
                        newdir="${_update.tmp.dir}/rhq-agent/conf"
                        filename="agent-configuration.xml" keep="old" backupextension=".new" failonerror="false" />
      <echo>Copy log4j configuration file - use the old copy and backup the new copy</echo>
      <copy-with-backup olddir="${rhq.agent.update.update-agent-dir}/conf"
                        newdir="${_update.tmp.dir}/rhq-agent/conf"
                        filename="log4j.xml" keep="old" backupextension=".new" failonerror="false" />

      <echo>
      Everything is done; _update.tmp.dir/rhq-agent has our new agent.
      The old agent is still intact, albeit with a new update subdirectory with the new agent in it.
      Start moving things around to get the new agent in the old agent's directory.
      If anything fails going forward, bad things will happen because the old agent will be ruined.
      </echo>

      <echo>Define where we are going to put the old agent - this is where the old agent will be backed up</echo>
      <property name="new.location.for.old.agent" location="${rhq.agent.update.update-agent-dir}/../rhq-agent-OLD" />
      <echo>Purge any previously backed-up old agent</echo>
      <delete dir="${new.location.for.old.agent}" /> <!-- in case there was a previous update's backup in here -->
      <echo>Move the old agent to the backup location</echo>
      <move file="${rhq.agent.update.update-agent-dir}"
            tofile="${new.location.for.old.agent}"
            failonerror="true"/>
      <echo>Make sure the location where the new agent is going to be is empty</echo>
      <delete dir="${rhq.agent.update.update-agent-dir}" /> <!-- just trying to clear the way for the new agent -->
      <echo>Put the new agent in its new location: [${new.location.for.old.agent}/${_update.tmp.dir.name}/rhq-agent] to [${rhq.agent.update.update-agent-dir}]</echo>
      <move file="${new.location.for.old.agent}/${_update.tmp.dir.name}/rhq-agent"
            tofile="${rhq.agent.update.update-agent-dir}"
            failonerror="true"/>
      <echo>Clean up the temporary location where the new agent was located (but no longer is)</echo>
      <delete dir="${new.location.for.old.agent}/${_update.tmp.dir.name}" />

      <echo>
      At this point, the new agent should now be at the old agent's location.
      The old agent is backed up to the rhq-agent-OLD directory next to new agent
      </echo>

      <echo>chmod +x on executables under ${rhq.agent.update.update-agent-dir}</echo>
      <chmod dir="${rhq.agent.update.update-agent-dir}/bin" perm="ug+rx" includes="*.sh"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.s0"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.sl"/>
      <chmod dir="${rhq.agent.update.update-agent-dir}/lib" perm="ug+rx" includes="*.dylib"/>

      <echo>The agent is updated and we don't need the backup anymore, so remove the first backup we made</echo>
      <delete dir="${java.io.tmpdir}/rhq-agent-update-backup" failonerror="false" verbose="false"/>

      <echo>
      FINISHED UPDATING THE AGENT SUCCESSFULLY!
      The new agent is now located at: ${rhq.agent.update.update-agent-dir}
      </echo>
   </target>

   <!-- ================================================================= -->
   <!-- makes sure the jar file where the agent distro is supposed to be actually exists -->
   <target name="verify">
      <fail message="Could not determine the location of the jar file or it does not exist: ${rhq.agent.update.jar-file}">
         <condition>
            <not>
               <available file="${rhq.agent.update.jar-file}" />
            </not>
         </condition>
      </fail>
   </target>

   <!-- ================================================================= -->
   <!-- header targets will simply output some information to the console -->
   <target name="header" depends="header-for-update, header-for-install">
   </target>

   <!-- ================================================================= -->
   <target name="header-for-update" if="rhq.agent.update.update-flag">
      <echo>
===== RHQ AGENT UPDATE =====
Agent To Be Updated: ${rhq.agent.update.update-agent-dir}
Version: ${rhq-agent.latest.version}
Build Number: ${rhq-agent.latest.build-number}
Jar File: ${rhq.agent.update.jar-file}
</echo>
   </target>

   <!-- ================================================================= -->
   <target name="header-for-install" unless="rhq.agent.update.update-flag">
      <echo>
===== RHQ AGENT INSTALL =====
Installing Agent To: ${rhq.agent.update.install-agent-dir}
Version: ${rhq-agent.latest.version}
Build Number: ${rhq-agent.latest.build-number}
Jar File: ${rhq.agent.update.jar-file}
</echo>
   </target>

   <!-- ================================================================= -->
   <!-- Run appropriate agent script for the platform we are on -->
   <target name="launch-agent"
           description="Runs the agent using the appropriate launcher script"
           depends="launch-agent-windows,launch-agent-unix,process-exit-code" />

   <!-- ================================================================= -->
   <!-- Try to run the windows service; if not installed, run the console script -->
   <target name="launch-agent-windows" if="iswindows"
           depends="launch-agent-windows-service,launch-agent-windows-console">
   </target>

   <!-- ================================================================= -->
   <target name="launch-agent-windows-service" if="iswindows">
      <echo>Launching the agent service: ${rhq.agent.update.launch-script-dir}/rhq-agent-wrapper.bat</echo>
      <exec dir="${rhq.agent.update.launch-script-dir}"
            executable="cmd"
            output="${rhq.agent.update.log-dir}/rhq-agent-launcher-service.log"
            resultproperty="_launcher.windows.service.exit.code"
            failonerror="false"
            failifexecutionfails="true">
         <arg value="/c"/>
         <arg value="rhq-agent-wrapper.bat restart &amp;&amp; if ERRORLEVEL 1 exit /B 1"/>
      </exec>
      <condition property="_launcher.windows.service.successful">
         <equals arg1="${_launcher.windows.service.exit.code}" arg2="0" />
      </condition>
   </target>

   <!-- ================================================================= -->
   <target name="launch-agent-windows-console" if="iswindows" unless="_launcher.windows.service.successful">
      <!-- you should not really rely on this in production - but, if the window service wrapper is not
           installed, let's try to run the agent using rhq-agent.sh and use the daemon option -->
      <echo>
         The agent does not seem to be installed as a Windows Service; will
         attempt to launch using the agent console script:
         ${rhq.agent.update.launch-script-dir}/rhq-agent.bat
      </echo>
      <exec dir="${rhq.agent.update.launch-script-dir}"
            executable="cmd"
            spawn="true">
        <arg line="/c start rhq-agent.bat"/>
      </exec>
      <property name="_launcher.windows.console.successful" value="true"/>
   </target>

   <!-- ================================================================= -->
   <target name="launch-agent-unix" unless="iswindows">
      <echo>Launching the agent: ${rhq.agent.update.launch-script-dir}/rhq-agent-wrapper.sh</echo>
      <exec dir="${rhq.agent.update.launch-script-dir}"
            executable="/bin/sh"
            inputstring=""
            output="${rhq.agent.update.log-dir}/rhq-agent-launcher.log"
            resultproperty="_launcher.unix.exit.code"
            failonerror="false"
            failifexecutionfails="true">
        <arg line="rhq-agent-wrapper.sh restart"/>
      </exec>
      <condition property="_launcher.unix.successful">
         <equals arg1="${_launcher.unix.exit.code}" arg2="0" />
      </condition>
   </target>

   <!-- ================================================================= -->
   <target name="process-exit-code"
           depends="process-exit-code-windows-service,
                    process-exit-code-windows-console,
                    process-exit-code-unix"/>
   
   <!-- ================================================================= -->
   <target name="process-exit-code-windows-service" if="_launcher.windows.service.successful">
      <echo>Launched agent as a Windows Service successfully</echo>
   </target>

   <!-- ================================================================= -->
   <target name="process-exit-code-windows-console" if="_launcher.windows.console.successful">
      <echo>Launched agent in a Windows console</echo>
   </target>

   <!-- ================================================================= -->
   <target name="process-exit-code-unix" if="_launcher.unix.successful">
      <echo>Launched Unix agent successfully</echo>
   </target>
</project>
